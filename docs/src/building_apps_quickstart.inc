.. _building_apps_quickstart:

The following steps are written for development on a OSX or Linux system.  Development on a Windows system is supported and should follow similar steps. Prior to proceeding Python must be installed and if preferred a Python virtual environment should be configured. For local testing a Redis server also must be installed and running. The steps to install Python, Redis, and configure a virtual environment are outside the scope of this document.

This quickstart guide will walk through each step to create a working App. It will initialize a fully functioning App. Adding custom code/logic is not covered in this quickstart guide.

.. Important:: This guide assumes that the workstation and ThreatConnect instance have the same version of Python installed. Writing Apps that support multiple versions of Python is supported but not covered in the quickstart guide.

Initializing an App
-------------------

.. code:: bash

    pip install tcex
    mkdir TCPB_-_JsonPretty
    cd TCPB_-_JsonPretty
    tcinit --action create --template playbook_utility

.. Note:: The prefix of **TCPB_-_** (ThreatConnect PlayBook) is optional. However, it's a helpful naming convention to distinguish PlayBook Apps from Job Apps.

After running the ``tcinit`` command the App directory/file structure will be autogenerated. The **playbook_utility** template is a working App so there is no need to change any of the files.

.. Note:: For more information on the App directory structure read the :ref:`App Structure <building_apps_structure>` section of the guide.

.. seealso::

    :ref:`App Templates <building_apps_templates>`
        Documentation for creating App Templates.

    :ref:`App Directory Structure <building_apps_structure>`
        Documentation for App files and folders structure.


Building the "lib" Directory
----------------------------

At a minimum all Apps require the ``tcex`` Python package.  If other Python packages are required the package name should be added to the requirements.txt file in the project directory. For this quickstart guide no additional packages are required.

.. code:: bash

    tclib

After running the ``tclib`` command a "lib_<Python version>" (e.g., lib_3.6.7) directory will be in the project directory. This directory will contain all Python packages defined in requirements.txt and any sub-dependencies.

.. Important:: This version of the lib directory should closely match the version of Python on the ThreatConnect server.  Difference in micro versions (e.g., Python version 3.6.5 / lib_3.6.7) are acceptable.

.. seealso::

    :ref:`App Dependencies <building_apps_dependencies>`
        Documentation for building App dependencies.

Creating a Testing Profile (Optional)
-------------------------------------

This section will go over the steps to setup a test profile to facilitate the testing of the App outside of the ThreatConnect platform. Creating testing profiles is not required to build and deploy and App. However, this feature provides a faster development cycle as compared to uploading the App to the ThreatConnect platform after each change.

.. code:: bash

    tcprofile --name simple_data

After running the ``tcprofile`` a the directory **tcex.d** will be created in the project directory.  The **tcex.d** directory will have the structure displayed below. New testing profiles can be added to existing file or new files can be created.

.. code:: bash

    tcex.d
    ├── data
    └── profiles
        └── simple_data.json

Now that *simple_data* profile has been created, testing value needs to be added to the **simple_data.json** file.  This template has 3 inputs defined in the **install.json** configuration files.  The ``tcprofile`` command will populate the values for the inputs if there is a **default** value defined in the **install.json** file.  Update the **simple_data.json** file with the values shown in the following code snippet.

.. code:: javascript

    <... snipped>
    "args": {
      "app": {
        "indent": "4",
        "json_data": "{\"four\":4, \"one\": 1, \"two\": 2, \"three\": 3}",
        "sort_keys": true
      },
    <snipped ...>

Environment Variables
~~~~~~~~~~~~~~~~~~~~~

An important part of local testing is setting up the appropriate environmental variables.  In each profile the ``args.default`` section has all the default args that will be provided to every App by the ThreatConnect Platform during execution. The values for these args can be entered directly into the configuration file, however to keep sensitive data out of VCS systems the use of environment variables is employed.

.. NOTE:: This list of environment variables can be found by running ``tcprofile -h``.

Update the values for each variable and add to the local environment (e.g., ~/.bashrc or ~/.bash_profile). Once done the environment file will need to be sourced once or the shell restarted before the values are available (e.g., source ~/.bashrc).

.. code:: bash

    # ThreatConnect API Credential and URL
    export API_DEFAULT_ORG=MyOrg
    export API_ACCESS_ID=1234
    export API_SECRET_KEY=abc123
    export TC_API_PATH=https://maclaren.pub/api

    # API Token can be supplied optionally, but must be updated frequently.
    export TC_TOKEN=123-abc-456-def

    # Proxy settings are optional
    export TC_PROXY_HOST=10.10.10.10
    export TC_PROXY_PORT=3128
    export TC_PROXY_USERNAME=robin
    export TC_PROXY_PASSWORD=sparkles

    # The Redis IP/Host and Port
    export DB_PATH=localhost
    export DB_PORT=6379

.. IMPORTANT:: To test that the values are available run ``echo $API_ACCESS_ID``.

.. seealso::

    :ref:`App Test Profiles <building_apps_profiles>`
        Documentation for creating App testing profiles.

Local Testing (Optional)
------------------------

This section will go over how to run the test profile created in the `Creating a Testing Profile (Optional)`_ step.

.. code:: bash

    tcrun --profile simple_data

The ``tcrun`` command logs informational messages to the screen about what actions are taken and the results.  At the bottom of the output a Report is displayed with the results of the testing profile.  If the execution "Passed" and the 2 validations passed then the App profile successfully ran.

.. code:: bash

    Report:
                                                     Validations
    Profile:                Execution:               Passed:   Failed:
    simple_data             Passed                   2         0

The ``tcrun`` command also logs to the **run.log** file in the log directory.  This log file is structured to help quickly discover errors with validation rules.  Any validation failure will be logged at **ERROR** level.

.. seealso::

    :ref:`Testing App Locally <building_apps_run>`
        Documentation for local testing of an App.

Packaging an App
----------------

.. code:: bash

    tcpackage

The ``tcpackage`` command will package all relevant files in the project directory into a "**.tcx**" file that can be uploaded to the ThreatConnect Platform. By default the package will be created in the **target** directory in the project directory.

.. IMPORTANT:: The ``tclib`` command must be successfully ran before packaging an App. Otherwise the App will be missing any dependencies and may not function properly.

.. seealso::

    :ref:`App Packaging <building_apps_package>`
        Documentation for packaging of an App.
